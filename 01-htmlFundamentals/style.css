/* 
h1,
h2,
h3,
h4,
p,
li {
  font-family: sans-serif;
  color: #444;
} */
/* No longer need this after inheritance */

/*
GLOBAL RESET first
*/
* {
  margin: 0;
  padding: 0;
  /* easily overwritten*/
  box-sizing: border-box; /* Not on the body because it is not a property that gets inherited */
}
/* PAGE SECTIONS */
body {
  /* Properties related to text should be on the body. Remember that no all properties get inherited, check the list in the pdf*/
  font-family: sans-serif;
  color: #444;
  border-top: 10px solid #1098ad;

  position: relative; /* Because of the button, positioned absolute, here we stablish the relation element */
}

.container {
  /* To center the page*/
  width: 1200px;
  /* margin-left: auto;
  margin-right: auto; */
  margin: 0 auto;
}
.main-header {
  background-color: #f7f7f7;
  padding: 20px 40px; /* left, right or all in one: value1 (top and bottom), value2 (left and right*/
  margin-bottom: 60px;
  /* height: 80px; */ /* if we have a fixed height, when we change the nav to block, the elements will overlap other (no longer fit, so the box does not expand. */
}
nav {
  font-size: 18px;
}
article {
  margin-bottom: 60px;
}

.post-header {
  margin-bottom: 40px;
}

aside {
  background-color: #f7f7f7;
  /* border: 5px solid #1098ad; */
  border-top: 5px solid #1098ad;
  border-bottom: 5px solid #1098ad;
  /* padding-top: 50px;
  padding-bottom: 50px; */
  padding: 50px 40px; /* The element becomes too big to fit with the default properties of the box model */
  /* width: 500px; Overwritten below */

  /* box-sizing: border-box;*/ /* sets the size of the element exactly to what we want, if we pad, it will subtract to the content area */
  /* We want this applied to all the boxes on the page, so we place it right at the universal selector */
}

/* SMALLER ELEMENTS */
h1,
h2,
h3 {
  /* inherited styles are easily overwritten */
  color: #1098ad;
}
h1 {
  font-size: 26px;

  text-transform: uppercase;
  font-style: italic;
}

h2 {
  font-size: 40px;
  margin-bottom: 30px;
  position: relative;
}

h3 {
  font-size: 30px;
  margin-bottom: 20px;
}

h4 {
  font-size: 20px;

  text-transform: uppercase;
  text-align: center;
  margin-bottom: 30px;
}

p {
  font-size: 22px;

  line-height: 1.5;
  margin-bottom: 15px;
}

ol,
ul {
  margin-left: 50px;
  margin-bottom: 20px;
}

li {
  font-size: 20px;
  /* margin */
  margin-bottom: 10px;
}

li:last-child {
  /* Usually we don't want the last one to have a margin, so we overwrite it */
  margin-bottom: 0; /* no unit */
}
#author {
  font-style: italic;
  font-size: 18px;
}

#copyright {
  font-size: 16px;
}

.related-author {
  font-size: 18px;
  font-weight: bold;
}

.related {
  list-style: none;
  margin-left: 0; /* Overwriting the code above */
}

/* .first-li {
  font-weight: bold;
} */
li:first-child {
  font-weight: bold;
}

/* styling links - always in this order */
a:link {
  color: #1098ad;
  text-decoration: none;
}

a:visited {
  /* color: #777 */
  color: #1098ad; /* normally the same as the color that we specify in the link */
}

a:hover {
  color: orangered;
  font-weight: bold;
  text-decoration: underline orangered;
}

a:active {
  background-color: black;
}

.post-img {
  /* We specify the height and width of the images in the css normally, not in html */
  /* width: 800px;
  height: auto;  */
  /* we need to do this because we've specified in html, if we haven't done that we could just specify the width and the height would be set to auto. */
  width: 100%; /* of the parent element, first mention of responsive design */
  height: auto;

  /* Images behave like inline block elements */
}

/* Block and inline elements */
nav a {
  /* All the links in the nav */
  /* background-color: orangered; */
  /* margin: 20px; */ /* No vertical space was created, remember, inline elements only change the width (no vertical space */
  /* padding: 20px; */ /* we can add padding, but no new space was created, notice the overlap to other elements */
  /* display: block; */

  margin-right: 30px;
  /* margin-top: 10px; */
  display: inline-block;
}

nav a:link:last-child {
  /* Two pseudo classes chained */
  margin-right: 0;
}

/*  ABSOLUTE AND RELATIVE POSITIONING - Remember that the button starts inflow, only after we change the display */
button {
  font-size: 22px;
  padding: 20px;
  cursor: pointer;
  position: absolute;
  /* top: 50px;
  left: 50px;  */
  /* By default, these values are in relation to the viewport, but we want to set this values in relation to other element, where we need to specifically state position relative */

  /* In this case we want to position the button in relation to the page, so, the body element. It can be other, what's to retain is the fact that it is the first parent element with relative positioning that is going to be accounted  */

  bottom: 50px;
  right: 50px;
}

h1::first-letter {
  /* (::) PSEUDO ELEMENTS - it is the book emoji */
  font-style: normal;
  margin-right: 5px;
}

/* p::first-line {
  color: red;
} */

/* h3 + p {
  Adjacent sibling selector (+), the first sibling after the h3 elements (if we just wanted the first letter ::first-line) 
   
  color: red; 
} */

h2::after {
  content: "TOP"; /* Mandatory, we need "" if we don't want content */
  background-color: #ffe70e;
  color: #444;
  font-size: 16px;
  font-weight: bold;
  padding: 5px 10px;
  position: absolute;
  top: -10px;
  right: -25px;
}

/* FLOATS */

/* The text from the paragraph (next in the code) floats around the image */
/* Notice that a floated image is still capable of adding margins around it.*/
/* .author-img {
  float: left;
  margin-bottom: 20px;
} */

/*margin-left: 10px; /* Does not work because the text floats around the image, however, in the inspector, you can see that the p does not start after the image but behind it. */
/* To work we need to add much more px, this proves that the image has been taken completely out of the flow */
/* margin-left: 80px; */

/* if we also use float on the paragraph you can see that now it actually starts after the img, so we don't need so much margin */
/* .author {
  margin-top: 10px;
  float: left;
  margin-left: 20px;
} */

/* h1 {
  float: left;
} */
/* Both of these lines of code explain the elements height collapse. Both are out of the flow, so the header container stays without content, so the display only appears because we've specified a height, otherwise it would completely disappear. */

/* See the differences between normal flow, absolute positioning and floats */
/* nav {
  float: right;
} */

/* To clear the floats */

/* We have floats to the right and the left so we use both */
/* .clear {
  clear: both;
} */

/* background-color: green;*/ /* Good technique to see the boxes clearly */
/* width: 900px;*/ /*900 + 300(aside) is equal to the 1200 that we specify for the container */
/* removed some width so there is a space between both*/
/* article {
  width: 825px;
  float: left;
} */

/*background-color: red;*/ /* Good technique to see the boxes clearly */
/* Remember that the footer appeared after the aside. */
/* aside {
  width: 300px;
  float: right;
} */

/*background-color: yellow; */ /* Good technique to see the boxes clearly */
/* to go where it belongs */
/* footer {
  clear: both;
} */

/* USING FLEXBOX */

/* Remember that we only have two elements (flex items) so justify content space between moves each to one side */
/* Also, we overwrite a lot of the rules written earlier */
.main-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.author-box {
  display: flex;
  align-items: center;
  margin-bottom: 15px;
}

.author {
  margin-bottom: 0;
  margin-left: 15px;
}

/* Styling the aside */
.related-post {
  display: flex;
  align-items: center;
  gap: 20px;
  margin-bottom: 30px;
}
.related-post:last-child {
  margin-bottom: 0;
}
/* Resetting some rules*/

.related-link:link {
  font-size: 17px;
  font-weight: bold;
  font-style: normal;
  display: block;
  margin-bottom: 5px;
}

.related-author {
  margin-bottom: 0;
  font-size: 14px;
  font-weight: normal;
  font-style: italic;
}

.row {
  display: flex;
  align-content: center;
  gap: 75px;
  margin-bottom: 60px;
  align-items: flex-start;
}

article {
  /* flex: 0 0 825px; */ /* We don't need to do the math if we set the article flex to 1, automatically fits the space available. */
  flex: 1;
  margin-bottom: 0;
}
/* 
DEFAULTS
flex-grow: 0; set to one allows the elements to grow to fit the container, to zero they occupy only what they need
  flex-shrink: 1; 1 allowed to shrink if the size that we specify is too big to fit the items in the container. 
    flex-basis: auto; */
aside {
  flex: 0 0 300px;
}

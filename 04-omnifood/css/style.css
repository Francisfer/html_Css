/* HEADER */
/*****************************************/
header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #fdf2e9;

  /* Setting a fixed height so later we make it sticky */
  height: 9.6rem;
  padding: 0 4.8rem;
}
.logo {
  height: 2.2rem;
  /* margin-right: auto; it works but remember that this was the trick in the app layout, where we just wanted the last button to go to the right */
}

/*****************************************/
/* HEADER - NAVIGATION */
/*****************************************/

/* Display */
.main-nav-list {
  list-style: none;
  display: flex;
  align-items: center;
  gap: 3.2rem;
}

/* Styling the links*/

.main-nav-link:link,
.main-nav-link:visited {
  display: inline-block; /*(good practice)*/
  text-decoration: none;
  color: #333;
  font-weight: 500;
  font-size: 1.8rem; /* Consistent with delivered-text*/
  /* Transition on the original state element */
  transition: all 0.3s;
}

.main-nav-link:hover,
.main-nav-link:active {
  color: #cf711f;
}

/* To make sure that this always applies (higher specificity 3) we use the and selector so that it only applies when the element has both classes. */
/* We need to do this because the code above gets applied to nav-cta and so this one below, however we have one conflict, which is the color */
/* With this technique of having higher specificity it gets resolved */
.main-nav-link.nav-cta:link,
.main-nav-link.nav-cta:visited {
  padding: 1.2rem 2.4rem;
  border-radius: 9px;
  color: #fff;
  background-color: #e67e22;
}

.main-nav-link.nav-cta:hover,
.main-nav-link.nav-cta:active {
  background-color: #cf711f;
}
/*****************************************/
/* HERO SECTION */
/*****************************************/
.section-hero {
  background-color: #fdf2e9;
  padding: 4.8rem 0 9.6rem 0;
}

/* Grid layout for the hero */
.hero {
  max-width: 130rem;
  display: grid;
  grid-template-columns: 1fr 1fr;
  margin: 0 auto;
  align-items: center;
  gap: 9.6rem;

  /* Adding some padding so that smaller screens don't have the content glued to the edge of the screen  */
  padding: 0 3.2rem;
}

.hero-description {
  font-size: 2rem;
  line-height: 1.6;
  margin-bottom: 4.8rem;
}

.hero-img {
  width: 100%;
}

/* Component for meals delivered - we use grid because here we don't care about the size of th columns, we let the content determine the sizes */
/* For delivered meals to be side by side with the paragraph */
.delivered-meals {
  display: flex;
  margin-top: 8rem;
  align-items: center; /* Vertically */
  gap: 1.6rem;
}
/* For images to be side by side */
.delivered-imgs {
  display: flex;
}

/* Selecting the images using the descendent selector */

.delivered-imgs img {
  /* Usually we don't need to specify the width, but there was a bug in safari at the time of the course that mess the images when they were flex items */
  /* width: 6.4rem; */
  height: 4.8rem;
  border-radius: 50%;
  margin-right: -1.6rem; /* To overlap the images */
  border: 3px solid #fdf2e9; /* Same color than the background */
}
.delivered-imgs img:last-child {
  margin-right: 0; /* To make the gap visible again, the last img cannot have a negative margin right */
}

.delivered-text {
  font-size: 1.8rem;
  font-weight: 600;
}

.delivered-text span {
  color: #cf711f;
  font-weight: 700;
}

/*****************************************/
/* FEATURED IN SECTION */
/*****************************************/
.section-featured {
  padding: 4.8rem 0 3.2rem 0; /* Taking some space on the bottom */
}

.heading-featured-in {
  font-size: 1.4rem;
  text-transform: uppercase;
  letter-spacing: 0.75px;
  font-weight: 500;
  text-align: center;
  margin-bottom: 2.4rem;
  color: #888;
}

.logos {
  display: flex;
  justify-content: space-around; /* So they don't go so wide */
}

.logos img {
  height: 3.2rem;
  /* Changing the colors of the images IMPORTANT */
  /* filter: grayscale(100%); black and white, but not with the same intensity */
  filter: brightness(0);
  opacity: 50%; /* Visible / Invisible but the middle term is grey*/
}
/*****************************************/
/* HOW IT WORKS SECTION */
/*****************************************/

.section-how {
  padding: 9.6rem 0;
}

.step-number {
  font-size: 8.6rem;
  font-weight: 600;
  color: #ddd; /* Rule breaking contrast */
  margin-bottom: 1.2rem;
}

.step-description {
  font-size: 1.8rem;
  line-height: 1.8;
}

.step-img-box {
  /* To center the img */
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
}

/* Circle pseudo elements */

.step-img-box::before,
.step-img-box::after {
  content: "";
  display: block;
  /* Technique to make it centered and behind of the image */
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.step-img-box::before {
  width: 60%;
  /* height: 60%; TRICK */
  /* Because the padding to the bottom is defined on the width of the element */
  padding-bottom: 60%; /* 60% of parents width */
  border-radius: 50%;
  background-color: #fdf2e9;

  /* Sending it back with Z-INDEX - IMPORTANT RULE-PROPERTY !!!*/
  z-index: -2;
}
/* Creating the other circle - we cannot use before again */

.step-img-box::after {
  width: 45%;
  padding-bottom: 45%;
  border-radius: 50%;
  background-color: #fae5d3;

  z-index: -1;
}

.step-img {
  width: 35%;
}

/*****************************************/
/* HOW IT WORKS SECTION */
/*****************************************/
.section-meals {
  padding: 9.6rem 0;
}

.meal {
  box-shadow: 0 2.4rem 4.8rem rgba(0, 0, 0, 0.075);
  border-radius: 11px;
  overflow: hidden; /* ANOTHER use for overflow, because the image and the text of the other card (or any element) where covering the borders */
}

.meal-content {
  padding: 3.2rem 4.8rem 4.8rem 4.8rem;
}
.meal-tags {
  margin-bottom: 1.2rem;
  display: flex;
  gap: 0.4rem;
}
.tag {
  display: inline-block; /* To apply some paddings */
  padding: 0.4rem 0.8rem;
  font-size: 1.2rem;
  text-transform: uppercase;
  color: #333;
  border-radius: 100px;
  font-weight: 600;
}
/* Variations */
.tag--vegetarian {
  background-color: #51cf66;
}
.tag--vegan {
  background-color: #94d82d;
}
.tag--paleo {
  background-color: #ffd43b;
}

.meal-img {
  width: 100%;
}

.meal-title {
  font-size: 2.4rem;
  color: #333;
  font-weight: 600;
  margin-bottom: 3.2rem;
}

.meal-attributes {
  list-style: none;
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.meal-attribute {
  font-size: 1.8rem;
  display: flex;
  align-items: center;
  gap: 1.6rem;
}

.meal-icon {
  height: 2.4rem;
  width: 2.4rem;
  color: #e67e22; /* Depending on the icons we might need to use fill, stroke, color or even font-size to style them */
}

/* Redefining the strong element so it doesn't get so bold. goes to the general of course */
/* strong {
  font-weight: 500;
} */
/* ------------------------------------
Things to take:

- Responsive design. There are essentially four ingredients to responsive designs:

01 - Fluid layouts - (flex and css grid) to allow the webpage to adapt to the current viewport width (or even height). Use % or vh/vw instead of px for elements that SHOULD adapt to the viewport. Also use max-width instead of width.


02 - Responsive units - REM instead of px for most lengths (conversion trick - set 1rem to 10px).


03 - Flexible images - By default, images behave different text, they don't scale automatically as we change the viewport. Always use % for image dimensions, together with max.width.


04 - Media queries - This is what brings all the other ingredients together and brings responsive sites to life. Media queries allow us to change styles on certain viewport widths (called breakpoints). Media queries allow developers to create different version of the site for different types of devices (different width).
We only use them at the end.

5 - Why we need a container flex to set a fixed size (so we can have a background color on the parent that occupies all the section)

6 - px to rems

7 - Trick to fake a inset border in the button with box-shadow

8 - The button animation.

9 - The helper function and the highest priority with the !important keyword. It is very common to use with margins that we don't want to apply directly on the elements in order to avoid conflict when we reuse them.

10 - The hero container should be a little wider for aesthetics.
*/

/*
Max-width and rem 

- 1. width - When we use width with a value (1000px as in the example, the element will always stay that wide, if we collapse the page a horizontal scroll bar appears precisely because of that.)

- 2. Max-width - if there is no more space to fit the container, the element should have the width of the parent container (body in this example). Like this it gets smaller after its width doesn't fit. This makes the element flexible to the viewport width.
Notice the difference if we used percentages, the element would then occupy the hole viewport always, but we want it to just have 1000px if the viewport gets bigger. 

3. REM - Root Element font size. The root of the document is the html element (parent to all the others).
If we don't define any font-size on the html element, one rem is equal to the default browser font-size, which is 16px (unless the user changes it).
So, in our example, if 1rem is 16px, 50 rem will be 800px.
In the computed bar of the inspector we can see the rems in px.
---> this will be handy when we build responsive layouts, because we only have to change the font-size in the html.
TRICK - In order of facilitating the math, we can set the font-size to 10px in the html, so that 1rem is 10, 5rem is 50 etc. But we don't do it with pixels, otherwise the users would not be able to change the font-size (accessibility). 

Instead we 

.test {
  background-color: red;
  max-width: 50rem;
  padding: 4rem;
  font-size: 2rem;
  color: #fff;
}
*/

/* Create a reusable grid */

/* .grid { */
/* grid container*/
/* display: grid;
  gap: 9.6rem;
} */

/* .section-how div div { */
/* Selecting all the div inside of the .section-how container */
/* padding: 100px;
  font-size: 50px;
  background-color: #333;
} */

/* .grid--2-cols {
  grid-template-columns: repeat(2, 1fr);
} */
/* Then we can copy it and specify the number of columns for each class */

/* .grid--3-cols {
  grid-template-columns: repeat(3, 1fr);
}
.grid--4-cols {
  grid-template-columns: repeat(4, 1fr);
} */

/* Now we just have to add the classes to the elements*/

/* -------- Generic centered container -----
This container is going to be the element that we will always use in order to center the content on the page (inside of the viewport).
*/

/*
ALL FOR CONSISTENCY 

---- 01 TYPOGRAPHY SYSTEM ----

- Font sizes (px):
10 / 12 / 14 / 16 / 18 / 20 / 24 / 30 / 36 / 44 / 52 / 62 / 74 / 86 / 98

- Font weights:
Default: 400
Medium: 500
Semi-bold: 600
Bold: 700

- Line heights:
Default: 1
Small: 1.05
Medium: 1.2
Paragraph default: 1.6

- Letter spacing
-0.5px
0.75px

---- 02 COLORS ----

- Primary: #e67e22
- Tints: 
#fdf2e9;
#fae5d3
- Shades: #cf711f
- Accents:
#51cf66
#94d82d
#ffd43b
- Greys: #555; #333;

---- 03 IMAGES - unsplash ----
---- 04 ICONS ----

---- 05 SHADOWS ----

---- 06 BORDER-RADIUS ----
Default: 9px
Medium: 11px
---- 07 WHITESPACE ----
- Spacing system (px)
2 / 4 / 8 / 12 / 16 / 24 / 32 / 48 / 64 / 80 / 96 / 128
*/

/* -------------------------- */

/* First general style - after we might change the font-family and the other rules */

* {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

html {
  /* font-size: 10px; */
  /* 10px / 16px = 0.625 === 62.5% */
  /* font-size: 62.5%; */
  /* font-size: 10px; Impossible to change the font size in the browser */
  /* 10px / 16px = 0.625 --> *100 = 62.5 */
  font-size: 62.5%;
  /* Like this we respect the scales and use the trick to facilitate the math */
}
body {
  font-family: "Rubik", sans-serif;
  line-height: 1;
  font-weight: 400;
  color: #555;
}

strong {
  font-weight: 500;
}
/*****************************************/
/* GENERAL REUSABLE COMPONENTS */
/*****************************************/

.heading-primary {
  font-size: 5.2rem;

  line-height: 1.05;

  /* For small distances we can keep using px */
  margin-bottom: 3.2rem;
}

.heading-primary,
.heading-secondary,
.heading-tertiary {
  font-weight: 700;
  color: #333;
  letter-spacing: -0.5px;
}
.heading-secondary {
  font-size: 4.4rem;
  line-height: 1.2;
  margin-bottom: 9.6rem;
}

.heading-tertiary {
  font-size: 3rem;
  line-height: 1.2;
  margin-bottom: 3.2rem;
}

.subheading {
  display: block; /* Because a span is an inline element */
  font-size: 1.6rem;
  font-weight: 500;
  color: #cf711f;
  text-transform: uppercase;
  margin-bottom: 1.6rem;
  letter-spacing: 0.75px;
}

.btn:link,
.btn:visited {
  display: inline-block; /* Always (good practice), for adding the padding*/
  font-size: 2rem;
  text-decoration: none;
  padding: 1.6rem 3.2rem;
  border-radius: 9px;
  font-weight: 600;
  /* Css animation -  has to be placed in the rule that has the original state. the first value is for the properties that we want to animate, the second is for how much time. The third is the type of the animation */

  transition: background-color 0.3s;
}

.btn--full:link,
.btn--full:visited {
  background-color: #e67e22;
  color: #fff;
}
.btn--full:hover,
.btn--full:active {
  background-color: #cf711f;
  color: #fff;
}
.btn--outline:link,
.btn--outline:visited {
  background-color: #fff;
  color: #555;
}
.btn--outline:hover,
.btn--outline:active {
  background-color: #fdf2e9;
  color: #555;
  /* border: 3px solid #fff; We can't add a border like this because all the content moves when the button is hovered. For this we use a trick with box shadow to add the border inside: */
  box-shadow: inset 0 0 0 3px #fff; /* We don't have the inset keyword of border */
}

/* Helper class - so that we don't have to wrap both buttons in a flex div and add a gap. REMEMBER THAT WE ALSO SHOULD'T ADD THE MARGIN TO THE BUTTON ITSELF BECAUSE WE MIGHT USE IT FURTHER AHEAD */

/* When we use a helper class, we usually want that the style that it has always gets applied, no matter other that are already on the element- !important */
.margin-right-sm {
  margin-right: 1.6rem !important;
}

/*--------- Reusable grid and centered container (not the container class, that is to have the content centered in the viewport, with a max width and padding at both sides) ------------*/

.container {
  /* 1140px - 114rem another standard */
  max-width: 120rem; /* Standard */
  margin: 0 auto; /* centering it */
  padding: 0 3.2rem; /* To add horizontal space, with this we get approximately the value above of 114rem for the content because we subtract 32px of both sides of the content. */
}

/* The most important thing here is that we never want to do this on the parent class, in this case the section how. */
/* This because we might want to have a background color or an image that extends to all of the viewport (like we did in the hero)*/
/* So we create a div to place these classes */

.grid {
  /* grid container*/
  display: grid;
  row-gap: 9.6rem;
  column-gap: 6.4rem;
}
.grid--center-v {
  align-items: center;
}

.grid--2-cols {
  grid-template-columns: repeat(2, 1fr);
}

.grid--3-cols {
  grid-template-columns: repeat(3, 1fr);
}
.grid--4-cols {
  grid-template-columns: repeat(4, 1fr);
}
